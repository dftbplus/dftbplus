#------------------------------------------------------------------------------#
#  DFTB+: general package for performing fast atomistic simulations            #
#  Copyright (C) 2017  DFTB+ developers group                                  #
#                                                                              #
#  See the LICENSE file for terms of usage and distribution.                   #
#------------------------------------------------------------------------------#

.SUFFIXES:
.SUFFIXES: .f .f90 .F90 .o
#.PRECIOUS: %.f90

FXXCLEAN = *.mod

# How to tell the preprocessor to look for includes
FYPPINC = -I

# Include user customization to set simply expanded (immediate) variables.

include $(ROOT)/make.config

FYPPOPT += -DDEBUG=$(DEBUG)

RELEASE := $(shell cat $(BUILDROOT)/RELEASE)
FYPPOPT += -DRELEASE="'$(RELEASE)'"

vpath % $(SRCDIRS)

############################################################################
# Dependencies
############################################################################

# All possible dependency files to include
DEPFILES := $(addsuffix /make.deps,$(SRCDIRS)) \
            $(addsuffix /make.extdeps,$(SRCDIRS))

# Sort out those really existing
EXISTING_DEPFILES := $(foreach dep,$(DEPFILES),$(wildcard $(dep)))

# Rule for creating the dependency file
_dependencies: $(EXISTING_DEPFILES)
	echo "#:include 'common.fypp'" > $@.tmp
	for dep in $^; do cat $$dep >> $@.tmp; done
	$(FYPP) $(FYPPOPT) $(inc-opts) $@.tmp $@

# Include dependency file unless only cleaning targets are specified which do
# not require it (NODEPTARGETS can be specified in the GNUmakefiles)
INCLUDE_DEP := 1
ifneq ($(filter clean $(NODEPTARGETS),$(MAKECMDGOALS)),)
  ifeq ($(filter-out clean $(NODEPTARGETS),$(MAKECMDGOALS)),)
    INCLUDE_DEP :=
  endif
endif
ifneq ($(INCLUDE_DEP),)
  -include _dependencies
endif


############################################################################
#  Implicit rules
############################################################################

# Create -Iinclude options for the preprocessor
define inc-opts
$(patsubst %,$(FYPPINC)%,$(dir $<) $(INCDIRS))
endef

#  If no external preprocessor had been specified -> direct compilation
#  otherwise -> compile in two steps

%.f90: %.F90
	$(FYPP) $(FYPPOPT) $(inc-opts) $< > $@

%.o: %.f90
	$(FXX) $(FXXOPT) $(L_INCS) -o $@ -c $<

%.o: %.f
	$(FXX) $(FXXOPT) $(L_INCS) -o $@ -c $<

_mod_%:
	@[ -f $< ] && touch $@


############################################################################
# External libraries
############################################################################
#
# Build list of external libraries needed for current target (deferred!)
#
#  Technique: If any requisite occurs as _extlib_<library name> the according
#  library will be linked. It must be already compiled at that point.
#  Dependency of an object file on a library must be set in the 
#  <sourcedir of object file >/make.extdeps as
#    <name of object file>: _extlib_<library name>
#    <name of object file> += _extlib_<library name>
#
# Options for the libraries:
#   L_LIBS: will be included in the final linking if the library is needed
#   L_INCS: will be included during compiling if the library is needed

COMPILED_EXTERNALS :=
PRESENT_EXTERNALS :=

# XMLF90
COMPILED_EXTERNALS += _extlib_xmlf90
LIB_XMLF90 := -L$(BUILDROOT)/external/xmlf90 -lxmlf90
INC_XMLF90 := -I$(BUILDROOT)/external/xmlf90
L_LIBS += $(if $(filter _extlib_xmlf90, $^), $(LIB_XMLF90))
L_INCS += $(INC_XMLF90)

# FSOCKETS
ifeq ($(strip $(WITH_SOCKETS)),1)
  COMPILED_EXTERNALS += _extlib_fsockets
  LIB_FSOCKETS = -L$(BUILDROOT)/external/fsockets -lfsockets
  INC_FSOCKETS = -I$(BUILDROOT)/external/fsockets
  L_LIBS += $(if $(filter _extlib_fsockets, $^), $(LIB_FSOCKETS))
  L_INCS += $(INC_FSOCKETS)
  FYPPOPT += -DWITH_SOCKETS
endif

# DFTD3
ifeq ($(strip $(WITH_DFTD3)),1)
  ifeq ($(strip $(COMPILE_DFTD3)),1)
    COMPILED_EXTERNALS += _extlib_dftd3
    DFTD3_LIBS := -L$(BUILDROOT)/external/dftd3 -ldftd3
    DFTD3_INCS := -I$(BUILDROOT)/external/dftd3
  else
    PRESENT_EXTERNALS += _extlib_dftd3
  endif
  FYPPOPT += -DWITH_DFTD3
  L_LIBS += $(if $(filter _extlib_dftd3, $^), $(DFTD3_LIBS))
  L_INCS += $(DFTD3_INCS)
endif


ifeq ($(strip $(WITH_MPI)),1)
  #
  # MPI settings
  #
  FYPPOPT += -DWITH_MPI -DWITH_SCALAPACK

  MPIFX_LIBS := -L$(BUILDROOT)/external/mpifx -lmpifx
  MPIFX_INCS := -I$(BUILDROOT)/external/mpifx
  L_LIBS += $(MPIFX_LIBS)
  L_INCS += $(MPIFX_INCS)

  SCALAPACKFX_LIBS := -L$(BUILDROOT)/external/scalapackfx -lscalapackfx
  SCALAPACKFX_INCS := -I$(BUILDROOT)/external/scalapackfx
  L_LIBS += $(if $(filter _extlib_scalapackfx, $^), $(SCALAPACKFX_LIBS)\
      $(LIB_SCALAPACK))
  L_INCS += $(SCALAPACKFX_INCS)

  COMPILED_EXTERNALS += _extlib_mpifx _extlib_scalapackfx

  # LAPACK/BLAS
  PRESENT_EXTERNALS += _extlib_lapack _extlib_blas
  L_LIBS_LAPACKBLAS += $(if $(filter _extlib_lapack, $^), $(LIB_LAPACK))
  L_LIBS += $(L_LIBS_LAPACKBLAS)
else
  #
  # NON-MPI settings
  #

  # LAPACK/BLAS
  PRESENT_EXTERNALS += _extlib_lapack _extlib_blas
  L_LIBS_LAPACKBLAS += $(if $(filter _extlib_lapack, $^), $(LIB_LAPACK))

  # ARPACK
  ifeq ($(strip $(WITH_ARPACK)),1)
    PRESENT_EXTERNALS += _extlib_arpack
    FYPPOPT += -DWITH_ARPACK
    L_LIBS_ARPACK += $(if $(filter _extlib_arpack, $^), $(ARPACK_LIBS))
  endif

  # If ARPACK was built without LAPACK/BLAS routines, they should be resolved from
  # the main LAPACK/BLAS library . Otherwise link ARPACK as last to prevent its
  # BLAS/LAPACK routines to interfere with the main libary (crashes in some cases)
  ifeq ($(strip $(ARPACK_NEEDS_LAPACK)),1)
    L_LIBS += $(L_LIBS_ARPACK) $(L_LIBS_LAPACKBLAS)
  else
    L_LIBS += $(L_LIBS_LAPACKBLAS) $(L_LIBS_ARPACK)
  endif
endif

$(COMPILED_EXTERNALS): __FORCE__
	touch -r $(BUILDROOT)/external/$(subst _extlib_,,$@)/BUILD_TIMESTAMP $@
__FORCE__:

$(PRESENT_EXTERNALS):
	touch $@

############################################################################
#  Targets
############################################################################

clean: 
	-rm -f *.o *.f90 _mod_* $(FXXCLEAN) _dependencies _extlib_*

############################################################################
# Misc.
############################################################################
# abbrev. for target linking
define link-target
$(LN) $(LNOPT) -o $@ $(filter-out _%,$^) $(L_LIBS) $(OTHERLIBS)
endef

# Include local makefile once again to override rules, defs and deferred vars
#include $(ARCHMAKE)


### Local Variables:
### mode:makefile
### End:
