#!-------------------------------------------------------------------------------------------------!
#!  DFTB+: general package for performing fast atomistic simulations                               !
#!  Copyright (C) 2006 - 2020  DFTB+ developers group                                              !
#!                                                                                                 !
#!  See the LICENSE file for terms of usage and distribution.                                      !
#!-------------------------------------------------------------------------------------------------!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#! Error string handling wrappers for returns from routinese
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


#! Macro to return an error flag if return variable available or throw
#! an error and shut down otherwise
#:def ERROR_HANDLING(errVar, errNumber, msg)
  block
    use dftbp_accuracy, only : lc
    use dftbp_message
    !> Error handling string
    character(lc) :: stringTmp

    write(stringTmp,"(A)")${msg}$
    if (present(${errVar}$)) then
      ${errVar}$ = ${errNumber}$
      call warning(stringTmp)
      return
    else
      call error(stringTmp)
    end if
  end block
#:enddef ERROR_HANDLING


#! Macro to return an error flag if return variable available or throw
#! an error and shut down otherwise
#:def FORMATTED_ERROR_HANDLING(errVar, errNumber, formating, *variables)
  block
    use dftbp_accuracy, only : lc
    use dftbp_message
    !> Error handling string
    character(lc) :: stringTmp

    write(stringTmp,${formating}$) ${ ",".join(variables) }$
    if (present(${errVar}$)) then
      ${errVar}$ = ${errNumber}$
      call warning(stringTmp)
      return
    else
      call error(stringTmp)
    end if
  end block
#:enddef FORMATTED_ERROR_HANDLING


#! Propagation of error handling, for now it just returns when in error
#:def HANDLE_ERROR(errVar)
  if (present(${errVar}$)) then
    if (${errVar}$ /= 0) then
      return
    end if
  end if
#:enddef


#! Signals error status.
#:def SET_ERROR(status, code, message)
  call ${status}$%setError(${code}$, ${message}$, "${_FILE_}$", ${_LINE_}$)
#:enddef SET_ERROR


#! Signals error status with error message formatting
#:def SET_FORMATTED_ERROR(status, code, format, *messageVars)
  block
    character(1024) :: message
    write(message, ${ format }$) ${ ",".join(messageVars) }$
    $:SET_ERROR(status, code, 'trim(message)')
  end block
#:enddef SET_FORMATTED_ERROR


#! Signals error status and returns from curren scope
#:def RAISE_ERROR(status, code, message)
  $:SET_ERROR(status, code, message)
  return
#:enddef RAISE_ERROR


#! Signals error status with error message formatting and returns from curren scope
#:def RAISE_FORMATTED_ERROR(status, code, format, *messageVars)
  $:SET_FORMATTED_ERROR(status, code, format, *messageVars)
  return
#:enddef


#! Returns immediately from current scope if status signals an error.
#:def PROPAGATE_ERROR(status)
  if (${status}$%hasError()) then
    return
  end if
#:enddef PROPAGATE_ERROR
