#------------------------------------------------------------------------------#
#  DFTB+: general package for performing fast atomistic simulations            #
#  Copyright (C) 2006 - 2020  DFTB+ developers group                           #
#                                                                              #
#  See the LICENSE file for terms of usage and distribution.                   #
#------------------------------------------------------------------------------#

# clear suffixes
.SUFFIXES:
.SUFFIXES: .f .f90 .F90 .o
%.PRECIOUS: %.f90

FXXCLEAN = *.mod
FYPPINC = -I

include $(ROOT)/make.config

FYPPOPT += -DDEBUG=$(DEBUG)

RELEASE := $(shell cat $(BUILDROOT)/RELEASE)
FYPPOPT += -DRELEASE="'$(RELEASE)'"
vpath % $(SRCDIRS)

############################################################################
# Dependencies
############################################################################

# All possible dependency files to include
DEPFILES := $(addsuffix /make.deps,$(SRCDIRS)) \
            $(addsuffix /make.extdeps,$(SRCDIRS))

# Sort out those really existing
EXISTING_DEPFILES := $(foreach dep,$(DEPFILES),$(wildcard $(dep)))

# Rule for creating the dependency file
_dependencies: $(EXISTING_DEPFILES)
	echo "#:include 'common.fypp'" > $@.tmp
	for dep in $^; do cat $$dep >> $@.tmp; done
	$(FYPP) $(FYPPOPT) $(inc-opts) $@.tmp $@

# Include dependency file unless only cleaning targets are specified which do
# not require it (NODEPTARGETS can be specified in the GNUmakefiles)
INCLUDE_DEP := 1
ifneq ($(filter clean $(NODEPTARGETS),$(MAKECMDGOALS)),)
  ifeq ($(filter-out clean $(NODEPTARGETS),$(MAKECMDGOALS)),)
    INCLUDE_DEP :=
  endif
endif
ifneq ($(INCLUDE_DEP),)
  -include _dependencies
endif


############################################################################
#  Implicit rules
############################################################################

# Create -Iinclude options for the preprocessor
define inc-opts
$(patsubst %,$(FYPPINC)%,$(dir $<) $(INCDIRS))
endef

#  If no external preprocessor had been specified -> direct compilation
#  otherwise -> compile in two steps

%.f90: %.F90
	$(FYPP) $(FYPPOPT) $(inc-opts) $< $@

%.o: %.f90
	$(FXX) $(FXXOPT) $(L_INCS) -o $@ -c $<

_mod_%:
	@[ -f $< ] && touch $@


############################################################################
# External libraries
############################################################################
#
# Build list of external libraries needed for current target (deferred!)
#
#  Technique: If any requisite occurs as _extlib_<library name> the according
#  library will be linked. It must be already compiled at that point.
#  Dependency of an object file on a library must be set in the
#  <sourcedir of object file >/make.extdeps as
#    <name of object file>: _extlib_<library name>
#    <name of object file> += _extlib_<library name>
#
# Options for the libraries:
#   L_LIBS: will be included in the final linking if the library is needed
#   L_INCS: will be included during compiling if the library is needed

COMPILED_EXTERNALS :=
PRESENT_EXTERNALS :=

# XMLF90
COMPILED_EXTERNALS += _extlib_xmlf90
LIB_XMLF90 := -L$(BUILDROOT)/external/xmlf90 -lxmlf90
INC_XMLF90 := -I$(BUILDROOT)/external/xmlf90
L_LIBS += $(if $(filter _extlib_xmlf90, $^), $(LIB_XMLF90))
L_INCS += $(INC_XMLF90)

# LAPACK/BLAS
PRESENT_EXTERNALS += _extlib_lapack
L_LIBS += $(if $(filter _extlib_lapack, $^), $(LIB_LAPACK))

$(COMPILED_EXTERNALS): __FORCE__
	touch -r $(BUILDROOT)/external/$(subst _extlib_,,$@)/BUILD_TIMESTAMP $@
__FORCE__:

$(PRESENT_EXTERNALS):
	touch $@

############################################################################
#  Targets
############################################################################

clean:
	-rm -f *.o *.f90 _mod_* $(FXXCLEAN) _dependencies _extlib_*

############################################################################
# Misc.
############################################################################
# abbrev. for target linking
define link-target
$(LN) $(LNOPT) -o $@ $(filter-out _%,$^) $(L_LIBS) $(OTHERLIBS)
endef

# Include local makefile once again to override rules, defs and deferred vars
#include $(ARCHMAKE)

### Local Variables:
### mode:makefile
### End:
