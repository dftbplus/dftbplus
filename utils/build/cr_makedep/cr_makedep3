#!/usr/bin/env python3
#------------------------------------------------------------------------------#
#  DFTB+: general package for performing fast atomistic simulations            #
#  Copyright (C) 2006 - 2019  DFTB+ developers group                           #
#                                                                              #
#  See the LICENSE file for terms of usage and distribution.                   #
#------------------------------------------------------------------------------#
#
##############################################################################
#
#  Creates dependency information for the GNU Make system by analyzing
#  Fortran 95 source code with cpp directives.
#
##############################################################################
#
#  The code builds a binary tree for each source file in the directories
#  passed as argument (or in ./ if no argument passed). The tree structure
#  is based on the #:if, #:else and #:endif directives in the file.
#  It can be printed out in a format appropriate for the DFTB+ make system.
#  One dependency list is printed for every possible combination of the
#  branching blocks.
#
##############################################################################
import re
import sys
import os
import copy

# prefix for printing module dependencies
MODULE_PREFIX = "_mod_"

# Patterns for branch constructs: #:if, #:else, #:endif
PAT_IF = re.compile(r"^[ \t]*#:if[ \t]+(?P<cond>.*)$",
                    re.MULTILINE)
PAT_ELSE = re.compile(r"^[ \t]*#:else[ \t]*$", re.MULTILINE)
PAT_ENDIF = re.compile(r"^[ \t]*#:endif\s*$", re.MULTILINE)

# Patterns for other constructs: #include, use, module
PAT_INCLUDE = re.compile(r"""^[ \t]*\#:include\s+
                             (?:'(?P<name1>[^']+)'
                             |\"(?P<name2>[^\"]+)\")
                             """, re.MULTILINE | re.VERBOSE)

PAT_USE = re.compile(r"^[ \t]*use[ \t]+(?P<mod>[^ \s,]*)",
                     re.MULTILINE | re.IGNORECASE)

PAT_MODULE = re.compile(r"^[ \t]*module[ \t]+(?P<mod>\S+)[ \t]*$",
                        re.MULTILINE | re.IGNORECASE)

# List of all patterns
PATTERNS = ( PAT_IF, PAT_ELSE, PAT_ENDIF, PAT_INCLUDE, PAT_USE, PAT_MODULE )

# Dependency information types
DEP_MODULE = 0
DEP_INCLUDE = 1

# Definition types
DFN_MODULE = 0

# Pattern to select files to process:
PAT_FILE = re.compile(r"\.f$|\.f90$|\.h$|\.inc$", re.IGNORECASE)

# Name of the dependency output
DEP_OUT = "make.deps"



class BranchBlock(object):
  """Contains information on a block which may contain dependency information
  and a branch point"""

  def __init__(self):
    """Initialises a BranchBlock"""
    self._dependencies = {}  # Dependencies
    self._definitions = {}   # Defined entities
    self._condition = ""     # Condition for the branch point
    self._trueChild = None   # True block of the branch
    self._falseChild = None  # False block of the branch
    self._hasBranch = False  # If current block contains a branch


  def addDependency(self, dep, depType):
    """Adds a dependency to the current block
    dep     -- name of the dependency
    depType -- type of the dependency
    """
    self._dependencies[(dep, depType)] = 1


  def addDefinition(self, dfn, dfnType):
    """Adds a dependency to the current block
    dfn     -- name of the definition
    depType -- type of the definition
    """
    self._definitions[(dfn, dfnType)] = 1


  def addBranch(self, condition, true, false):
    """Adds a branch to the current block
    condition -- Branching condition
    true      -- True block of the branch
    false     -- False block of the branch
    """
    # Make sure, all branches are proper objects
    true = true or BranchBlock()
    false = false or BranchBlock()

    if self._hasBranch:
      # We have a branch point already, add new branch to them
      if self._condition == condition:
        self._trueChild.extendBlock(true)
        self._falseChild.extendBlock(false)
      else:
        self._trueChild.addBranch(condition, true, false)
        self._falseChild.addBranch(condition, true, false)
    else:
      # No branch point yet: branch point added to the current block
      self._hasBranch = True
      self._condition = condition
      self._trueChild = copy.deepcopy(true)
      self._falseChild = copy.deepcopy(false)


  def extendBlock(self, block):
    """Extends a block with the content of an other one.
    block -- Contains the information to add
    """
    self._dependencies.update(block._dependencies)
    self._definitions.update(block._definitions)
    if block._hasBranch:
      self.addBranch(block._condition, block._trueChild, block._falseChild)


  def hasBranch(self):
    """Returns flag, if current block contains a branch or not"""
    return self._hasBranch


  def hasDepsOrDefs(self):
    """Flags, if current block contains any dependencies or definitions"""
    return (len(self._dependencies) != 0 or len(self._definitions) != 0)


  def printTree(self, fp, fbase, fext, fsrc):
    """Prints the dependency tree in the appropriate format
    fp -- pointer to an open file
    fbase -- base name of the processed file
    fext -- extension of the processed file
    fsrc -- flags if processed file was a fortran file or not
    (A more elegant implementation would do this with a writer class...)
    """
    self._printTreeRecursive(fp, [], [], fbase, fext, fsrc)


  def _printTreeRecursive(self, fp, deps, dfns, fbase, fext, fsrc):
    # Working horse for the printDeps routine
    # fp: file pointer
    # deps: Dependencies so far
    # dfns: Definitions so far
    # fbase: base name of the processed file
    # fext: extension of the processed file
    # fsrc: flags if processed file was a fortran source file

    newDeps = deps + list(self._dependencies.keys())
    newDfns = dfns + list(self._definitions.keys())

    if self._hasBranch:
      # We have a branch point, dive into the true and false branch
      print("#:if %s" % self._condition, file=fp)
      self._trueChild._printTreeRecursive(fp, newDeps, newDfns, fbase, fext,
                                          fsrc)
      print("#:else", file=fp)
      self._falseChild._printTreeRecursive(fp, newDeps, newDfns, fbase, fext,
                                           fsrc)
      print("#:endif", file=fp)
    else:
      # No further branch points: print all dependencies in the right order
      filedeps = []
      vardeps = []
      for (depName, depType) in newDeps:
        if depType == DEP_MODULE:
          tmp = "%s%s" % (MODULE_PREFIX, depName)
          filedeps.append(tmp)
          vardeps.append("$(%s)" % tmp)
        else:
          filedeps.append(depName)
          vardeps.append("$(%s)" % depName)
      if fsrc:
        print("%s.o:" % (fbase), file=fp, end=' ')
        if filedeps:
          print(" ".join(filedeps), file=fp, end=' ')
        print("", file=fp)
        print("%s.o = %s.o" % (fbase, fbase), file=fp, end=' ')
        if vardeps:
          print(" ".join(vardeps), file=fp, end=' ')
        print("", file=fp)
      else:
        if filedeps:
          print("%s%s:" % (fbase, fext), file=fp, end=' ')
          print(" ".join(filedeps), file=fp, end=' ')
        print("%s%s =" % (fbase, fext), file=fp, end=' ')
        if vardeps:
          print(" ".join(vardeps), file=fp, end=' ')
        print("", file=fp)

      # Print definitions:
      for (dfnName, dfnType) in newDfns:
        if dfnType == DFN_MODULE:
          print("%s%s: %s.o" % (MODULE_PREFIX, dfnName, fbase), file=fp)
          print("%s%s = $(%s.o)" % (MODULE_PREFIX, dfnName, fbase), file=fp)



def buildDependencyTree(txt):
  """Creates a binary dependency tree for the given text"""

  end = len(txt)
  matches = [ pat.search(txt) for pat in PATTERNS ]
  starts = []
  for match in matches:
    if match:
      starts.append(match.start())
    else:
      starts.append(end)
  (iType, node) = buildDependencyRecursive(txt, matches, starts)
  return node



def nextMatch(txt, matches, starts, iType):
  # Helper function for buildDependencyRecursive, updating matches and
  # starts by replacing the entries for iType with the next occurance.

  if matches[iType] == None:
    raise "Invalid nesting of blocks (probably unclosed #:if* block)"
  match = PATTERNS[iType].search(txt, matches[iType].end())
  matches[iType] = match
  if match:
    starts[iType] = match.start()
  else:
    starts[iType] = len(txt)


def buildDependencyRecursive(txt, matches, starts):
  """Working function for buildDependency tree
  txt     -- text to parse
  matches -- last match for each pattern in PATTERNS
  starts  -- starting position of the last matches (len(txt) if no match)
  return  -- (iType, node), where iType is the type of the closing block
    and node is the tree built.
  """

  block = BranchBlock()
  end = len(txt)
  firstPos = min(starts)
  iType = -1

  # Loop as long we did not reach the end of the text
  while firstPos < end:

    # get entry type and match object for the first pttern match
    iType = starts.index(firstPos)
    match = matches[iType]

    if iType == 0:
      # Branch opening (#:if)
      condition = match.group("cond")
      nextMatch(txt, matches, starts, iType)
      (iType, ifBranch) = buildDependencyRecursive(txt, matches, starts)
      if iType == 1:
        # If branch ended with #:else -> parse the else branch as well
        nextMatch(txt, matches, starts, iType)
        (iType, elseBranch) = buildDependencyRecursive(txt, matches, starts)
      else:
        elseBranch = None
      # Sanity check: #:if must be closed by #:endif
      if iType != 2:
        raise "ERROR, #:else must be terminted by #:endif"
      # if any of the two branches contains usefull info, add the branch to
      # the current block
      if ifBranch or elseBranch:
        block.addBranch(condition, ifBranch, elseBranch)
    elif iType == 1 or iType == 2:
      # block closing #:else or #:endif found -> escape to higher level
      break
    elif iType == 3:
      # #include found
      groups = match.groups()
      name = groups[0]
      if not name:
        name = groups[1]
      block.addDependency(name, DEP_INCLUDE)
    elif iType == 4:
      # module found
      block.addDependency(match.group("mod").lower(), DEP_MODULE)
    elif iType == 5:
      # module defintion found
      block.addDefinition(match.group("mod").lower(), DFN_MODULE)
    else:
      raise "Unknown iType: %d" % iType

    # Get next occurance for processed entry
    nextMatch(txt, matches, starts, iType)
    firstPos = min(starts)

  # Pass block back, if it contains usefull info
  if block.hasDepsOrDefs() or block.hasBranch():
    return (iType, block)
  else:
    return (iType, None)




def main():
  """Main procedure"""

  if len(sys.argv) > 1:
    dirnames = sys.argv[1:]
  else:
    dirnames = [ "." ]

  for dirname in dirnames:
    fp = open(os.path.join(dirname, DEP_OUT), "w")
    fnames = os.listdir(dirname)
    fnames.sort()
    for fname in fnames:
      if PAT_FILE.search(fname):
        pathName = os.path.join(dirname, fname)
        print("Processing: %s" % pathName)
        txt = open(pathName, "r", newline=None).read()
        tree = buildDependencyTree(txt)
        if tree:
          fbase, fext = os.path.splitext(os.path.basename(fname))
          fextLow = fext.lower()
          fsrc =  (fextLow == ".f90" or fextLow == ".f")
          tree.printTree(fp, fbase, fext, fsrc)
          print("", file=fp)
    fp.close()



if __name__ == "__main__":
  main()


### Local Variables:
### mode:python
### End:
