#!/usr/bin/env python3

"""Checks the submodule commit IDs in integration CMake files."""

import os
import subprocess
import re
import argparse
import sys

_DESCRIPTION = """
Checks (and optionally updates) the submodule commit IDs in the integration
CMake files. It loops over all git submodules, reads their commit hashes and
checks, whether it matches the commit ID in the CMakeLists.txt in the parent
folder. The script must be run from the projects root folder and the git command
should work.
"""

_PAT_SUBMOD_COMMIT = re.compile(
    r"[-+ ]*(?P<commit>[0-9a-f]+)\s+external/(?P<submodule>\w+).*")


def main():
    """Main script"""
    args = _parse_arguments()
    result = subprocess.run(["git", "submodule", "status"], capture_output=True,
                            check=True)
    output = result.stdout.decode('ascii')
    allsync = True
    for match in _PAT_SUBMOD_COMMIT.finditer(output):
        commit, submodule = match.groups()
        cmakefile = os.path.join("external", submodule, "CMakeLists.txt")
        with open(cmakefile, "r") as fp:
            content = fp.read()
        newcontent = _replace_submodule_commit(content, submodule, commit)
        sync = (newcontent == content)
        if sync:
            print("+ Commit in {} matches submodule commit.".format(cmakefile))
        elif args.update:
            with open(cmakefile, "w") as fp:
                fp.write(newcontent)
            print("* Commit in {} had been updated.".format(cmakefile))
        else:
            print("! Commit in {} DOES NOT match submodule commit!"\
                  .format(cmakefile))
            allsync = False
    if not allsync:
        sys.exit(1)


def _parse_arguments():
    """Returns command line arguments"""
    parser = argparse.ArgumentParser(description=_DESCRIPTION)
    msg = "Whether the commits should be updated in the CMakeLists.txt files"
    parser.add_argument("-u", "--update", action='store_true', help=msg)
    return parser.parse_args()


def _replace_submodule_commit(content, submodule, commit):
    """Replaces the commit id in the CMakeLists.txt file content"""
    submodule_upper = submodule.upper()
    newcontent = re.sub(
        r"set\({}_GIT_TAG (['\"]).+\1\)".format(submodule_upper),
        'set({}_GIT_TAG "{}")'.format(submodule_upper, commit),
        content)
    return newcontent


if __name__ == '__main__':
    main()
